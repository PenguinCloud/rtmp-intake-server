######
# BE SURE TO UPDATE THE ENV for REPO TO YOUR REPO NAME !!!
######

name: Publish Docker image

on:
  release:
    types: [published]
  push:
    branches: ['release','main']
  schedule:
    - cron: 1 1 * * 1
env:
  REPO: core
jobs:
  push_to_registries:
    name: Push Docker image to multiple registries
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
        
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        
      - name: Ansible Lint
        uses: ansible/ansible-lint-action@v6.11.0
        
      - name: "Read Java Info"
        id: "java_info"
        uses: YunaBraska/java-info-action@main
      - name: "Print Java Version"
        run: |
          echo "java_version [${{ steps.java_info.outputs.java_version }}]"
          echo "artifact_name [${{ steps.java_info.outputs.artifact_name }}]"
          echo "project_version [${{ steps.java_info.outputs.project_version }}]"
          echo "project_encoding [${{ steps.java_info.outputs.project_encoding }}]"
          echo "is_gradle [${{ steps.java_info.outputs.is_gradle }}]"
          echo "is_maven [${{ steps.java_info.outputs.is_maven }}]"
          echo "has_wrapper [${{ steps.java_info.outputs.has_wrapper }}]"
          echo "builder_name [${{ steps.java_info.outputs.builder_name }}]"
          echo "x_sourceCompatibility [${{ steps.java_info.outputs.x_sourceCompatibility }}]"
          echo "x_project_build_finalName [${{ steps.java_info.outputs.x_project_build_finalName }}]"
          echo "x_groovyOptions_encoding [${{ steps.java_info.outputs.x_groovyOptions_encoding }}]"
          echo "x_net_minidev_json-smart_version [${{ steps.java_info.outputs.x_project_dependencies_dependency_net_minidev_json-smart_version }}]"
      - name: "Setup Java"
        uses: actions/setup-java@main
        with:
          java-version: ${{ steps.java_info.outputs.java_version }}
          distribution: 'adopt'
      - name: "Run tests"
        run: sh ${{ steps.java_info.outputs.cmd_test }}
      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: |
            penguincloud/${{ env.REPO }}
            ghcr.io/${{ github.repository }}
      
      - name: Build and push Docker images
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        
      - name: Mattermost Notification
        uses: tferreira/matterfy@releases/v1
        if: always()
        with:
          type: ${{ job.status }}
          job_name: '*Lint Check*'
          channel: 'Builds'
          url: ${{ secrets.MATTERMOSTBUILD }}
